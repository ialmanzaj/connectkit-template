// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String   @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    createdAt         DateTime @default(now()) @map(name: "created_at")
    updatedAt         DateTime @default(now()) @map(name: "updated_at")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
    @@map(name: "accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@map(name: "sessions")
}

model User {
    id        String   @id @default(cuid())
    name      String?
    // New address
    address   String?  @unique
    email     String?  @unique
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @default(now()) @map(name: "updated_at")

    accounts Account[]
    sessions Session[]
    groups   Group[]

    @@map(name: "users")
}

model Group {
    id   Int    @id @default(autoincrement())
    name String
    slug String
    //ownerId String
    //owner   User   @relation(name: "owner", fields: [ownerId], references: [id], onDelete: Cascade)

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    members   User[]
}
